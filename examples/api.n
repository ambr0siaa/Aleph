# This is the single comment.

#>
    This is the big comment.

    Aleph Types:
        1.  Void         (void)
        2.  Bool         (bool)
        3.  Integer      (int)
        4.  Float        (flt)
        5.  Unsigned     (uint)
        6.  String       (str)
        7.  Character    (char)
        8.  Function     (fn)
        9.  Namespace    (namespace)
        10. Vector 2d    (vec2)
        11. Vector 3d    (vec3)
        12. Vector 4d    (vec4)
        13. Array        (<T>[])
        14. Array Nd     (<T>[][]...[])

    Aleph built in statements:
        1.  if/elif/else         (conditions)
        2.  while                (loop)
        3.  continue/break       (loop control)
        5.  import               (requiring file)
        6.  return               (returning from function call)
        8.  =                    (assignment)
        9.  > >= < <= ==         (compare)
        10. * - + / %            (arethmetic ops)
        11. ( )                  (function/map argumens, statement)
        12. & | ^ ~ << >>        (bitwise ops) 
        13. and/or/not           (logic ops)
        14. module               (new types)

    Aleph markers:
        1. :        (typing)
        2. ,        (separating)
        3. ->       (directing) 
        4. .        (namespace call)

    Aleph default expressions:
        1. none
        2. true
        3. false

    Functions:
        name:fn = (what) -> (where) (how)

    Suntax sugar for functions:
        fn (where) name (what) (how)

<#

a:flt = 234.0
b:flt = 567.0
c:flt = a * b - (a - b) / 7.0
print("Get result = %f\n", c)   # Printing format as in C 

swap:fn = void -> void (
    copy:flt = a
    a = b
    b = a
)

fn int f (x:bool, y:int) (
    if x == True
        return y - 69
    else
        return y

    # Some coding... 
)

# In stdlib file

    import builtin

    std : namespace = (
        math, da, hashmap : extern namespace
    )

    math : namespace = (
        pi : const flt = 3.1415926535
        fn flt sqrtf x:flt builtin.sqrt(x)
        fn flt sqrf  x:flt return x * x
    )

    da : namespace = (
        # Some code...
    )

    hashmap : namespace = (
        # Some code...
    )


# In other file

    import std.math

    module pair (a, b: flt) -> (
        x:flt = a, y:flt = b
        fn flt len    void math.sqrtf(x * x + y * y)
        fn flt sqrlen void math.sqrf(len())
    )

    arr:flt[] = [1, 2, 3, 5, 8, 13]

    point:pair                          # <=> point:pair = pair(none, none)
    point.x = arr[0]
    point.y = arr[1]
    
    point1:pair = pair(23.0, 3.0)
    a = point.len()
    b = point.sqrlen()
    swap()
